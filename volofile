'use strict';
/*jslint */
/*global define, console, process */

define(function (require) {
    var amdify = require('amdify'),
        q = require('q');

    return {
        onCreate: {
            run: function (d, v, namedArgs) {
                var tempName = 'tempbootstrap',
                    jsNameRegExp = /bootstrap-(\w*)\.js$/;

                //Grab the twitter bootstrap and jQuery
                v.command('create', tempName, 'twitter/bootstrap')
                .then(function () {
                    return v.command('add', 'jquery/jquery/1.7.1');
                })
                .then(function (result) {
                    //Move the JS to the right location.
                    var jsFiles = v.getFilteredFileList(tempName + '/js', /\.js$/, /test/),
                        promises = [];

                    jsFiles.forEach(function (file) {
                        //Pull off the name part from bootstrap-name.js pattern.
                        var name = jsNameRegExp.exec(file)[1],
                            destName = 'www/js/bootstrap/' + name + '.js',
                            damd = q.defer();

                        v.copyFile(file, destName);

                        //Convert the file to AMD style
                        amdify.run.apply(amdify, [damd, v, {
                            depends: 'jquery'
                        }, destName]);

                        promises.push(damd);
                    });

                    //Wait for all the amdify calls to finish.
                    q.all(promises)
                    .then(function (value) {

                        //Copy the images over.
                        v.copyDir(tempName + '/img', 'www/img');

                        //Copy the less files.
                        v.copyDir(tempName + '/less', 'tools/less');

                        //Compile the CSS.
                        v.command('less').then(function () {
                            v.rm(tempName);
                        })
                        .then(d.resolve, d.reject);

                    }).fail(d.reject);
                })
                .fail(d.reject);
            }
        },

        less: function (d, v, namedArgs) {
            q.all([
                v.exec('node tools/oneless.js tools/less/bootstrap.less > www/css/bootstrap.css'),
                v.exec('node tools/oneless.js tools/less/responsive.less > www/css/bootstrap-responsive.css')
            ])
            .then(function () {
                d.resolve();
            })
            .fail(d.reject);
        },
        
        cache: function (d, v, namedArgs) {
            require(['text!./tools/manifest.appcache'], function (manifest) {
                var appfiles = v.getFilteredFileList('www-built'), 
                    buffer = ''; 
                
                appfiles = appfiles.map(function (file) {
                    var start = file.indexOf('/www-built/'), file;
                    start = (start !== -1) ? (start + 11) : 0;
                    return file.substr(start, file.length);
                }); 
                
                manifest = manifest.replace(/{files}/, appfiles.join('\n'));
                manifest = manifest.replace(/{stamp}/, new Date().getTime()); // cache buster               

                v.write('www-built/manifest.appcache', manifest);                  
            });            
        }
    };
});

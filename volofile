'use strict';
/*jslint regexp: false */
/*global define, console, process */

define(function (require) {
    var amdify = require('amdify'),
        q = require('q');

    return {
        onCreate: {
            run: function (d, v, namedArgs) {
                var tempName = 'tempbootstrap',
                    jsNameRegExp = /bootstrap-(\w*)\.js$/;

                //Grab the twitter bootstrap and jQuery
                v.command('create', tempName, 'twitter/bootstrap')
                .then(function () {
                    return v.command('add', 'jquery/jquery/1.7.1');
                })
                .then(function (result) {
                    //Move the JS to the right location.
                    var jsFiles = v.getFilteredFileList(tempName + '/js', /\.js$/, /test/),
                        promises = [];

                    jsFiles.forEach(function (file) {
                        //Pull off the name part from bootstrap-name.js pattern.
                        var name = jsNameRegExp.exec(file)[1],
                            destName = 'www/js/bootstrap/' + name + '.js',
                            damd = q.defer();

                        v.copyFile(file, destName);

                        //Convert the file to AMD style
                        amdify.run.apply(amdify, [damd, v, {
                            depends: 'jquery'
                        }, destName]);

                        promises.push(damd);
                    });

                    //Wait for all the amdify calls to finish.
                    q.all(promises)
                    .then(function (value) {

                        //Copy the images over.
                        v.copyDir(tempName + '/img', 'www/img');

                        //Copy the less files.
                        v.copyDir(tempName + '/less', 'tools/less');

                        //Compile the CSS.
                        v.command('less').then(function () {
                            v.rm(tempName);
                        })
                        .then(d.resolve, d.reject);

                    }).fail(d.reject);
                })
                .fail(d.reject);
            }
        },

        build: {
            flags: {
                //Does not print the build output.
                'q': 'quiet',
                //Uses almond
                'almond': 'almond'
            },

            run: function (d, v, namedArgs) {
                q.call(function () {
                    //Remove the old build.
                    if (v.exists('www-built')) {
                        v.rm('www-built');
                    }

                    //Copy the directory for output.
                    v.copyDir('www', 'www-built');

                    //Remove the js dir from the built area, will be replaced
                    //by an optimized app.js
                    v.rm('www-built/js');
                })
                .then(function () {
                    //Do the CSS optimization
                    return v.spawn('node', ['tools/r.js', '-o',
                                            'cssIn=www/css/app.css',
                                            'out=www-built/css/app.css'], {
                        useConsole: !namedArgs.quiet
                    });
                })
                .then(function () {
                    //JS go time
                    if (namedArgs.almond) {
                        //The all-in-one option.
                        return v.spawn('node', ['tools/r.js', '-o',
                                        'baseUrl=www/js',
                                        'paths.almond=../../tools/almond',
                                        'name=almond',
                                        'include=app',
                                        'out=www-built/js/app.js'], {
                            useConsole: !namedArgs.quiet
                        });
                    } else {
                        //Still use require.js to load the app.js file.
                        v.copyFile('www/js/require.js', 'www-built/js/require.js');

                        return v.spawn('node', ['tools/r.js', '-o',
                                        'baseUrl=www/js',
                                        'name=app',
                                        'out=www-built/js/app.js'], {
                            useConsole: !namedArgs.quiet
                        });
                    }
                })
                .then(function (buildOutput) {
                    //If almond is in use, it is built into app.js, so need
                    //to update the script tag to just load app.js instead.
                    if (namedArgs.almond) {
                        var indexName = 'www-built/index.html',
                            contents = v.read(indexName),
                            scriptRegExp = /(<script[^>]+data-main="[^"]+"[^>]+)(src="[^"]+")([^>]+>\s*<\/script>)/;

                        contents = contents.replace(scriptRegExp, function (match, pre, script, post) {
                            return pre + 'src="js/app.js"' + post;
                        });

                        v.write(indexName, contents);
                    }
                    return buildOutput;
                })
                .then(function (buildOutput) {
                    d.resolve();
                }, d.reject);
            }
        },

        less: function (d, v, namedArgs) {
            q.all([
                v.exec('node tools/oneless.js tools/less/bootstrap.less > www/css/bootstrap.css'),
                v.exec('node tools/oneless.js tools/less/responsive.less > www/css/bootstrap-responsive.css')
            ])
            .then(function () {
                d.resolve();
            })
            .fail(d.reject);
        },
        
        appcache: function (d, v, namedArgs) {
            var manifest = v.read('./tools/manifest.appcache'), appfiles,
                master = v.read('./www-built/index.html'), 
                exclude = 'require\.js$|app\.js$';
            
            appfiles = v.getFilteredFileList('www-built', null, exclude);             
            appfiles = appfiles.map(function (file) {
                var start = file.indexOf('/www-built/'), file;
                start = (start !== -1) ? (start + 11) : 0;
                return file.substr(start, file.length);
            });    
            
            master = master.replace(/<html>/, '<html manifest="manifest.appcache">'); 
            v.write('www-built/index.html', master);         

            manifest = v.template(manifest, { files : appfiles.join('\n'), stamp : new Date().getTime() });                
            v.write('www-built/manifest.appcache', manifest);
            console.log(manifest);                              
        }
    };
});
